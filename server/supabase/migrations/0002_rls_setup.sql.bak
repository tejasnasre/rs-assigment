-- Enable Row Level Security (RLS) on all tables and setup RLS context functions

-- Additional setup for RLS to work with application context
-- Create a function to set current user context
CREATE OR REPLACE FUNCTION set_current_user_context(user_id UUID)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  PERFORM set_config('app.current_user_id', user_id::text, true);
END;
$$;

-- Function to get current user context
CREATE OR REPLACE FUNCTION get_current_user_context()
RETURNS TABLE(user_id UUID, user_role user_role, is_active BOOLEAN, email_verified BOOLEAN)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT u.id, u.role, u.is_active, u.email_verified
  FROM users u
  WHERE u.id = current_setting('app.current_user_id', true)::uuid;
END;
$$;

-- Trigger to update store average rating when rating is inserted/updated/deleted
CREATE OR REPLACE FUNCTION update_store_rating_stats()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update average rating and total ratings for the store
  UPDATE stores 
  SET 
    average_rating = COALESCE((
      SELECT ROUND(AVG(rating)::numeric, 1) 
      FROM store_ratings 
      WHERE store_id = COALESCE(NEW.store_id, OLD.store_id)
    ), 0),
    total_ratings = COALESCE((
      SELECT COUNT(*) 
      FROM store_ratings 
      WHERE store_id = COALESCE(NEW.store_id, OLD.store_id)
    ), 0),
    updated_at = NOW()
  WHERE id = COALESCE(NEW.store_id, OLD.store_id);
  
  RETURN COALESCE(NEW, OLD);
END;
$$;

-- Create triggers for store rating updates
DROP TRIGGER IF EXISTS update_store_rating_stats_trigger ON store_ratings;
CREATE TRIGGER update_store_rating_stats_trigger
  AFTER INSERT OR UPDATE OR DELETE ON store_ratings
  FOR EACH ROW
  EXECUTE FUNCTION update_store_rating_stats();

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;

-- Create updated_at triggers for all tables
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at 
  BEFORE UPDATE ON users 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_stores_updated_at ON stores;
CREATE TRIGGER update_stores_updated_at 
  BEFORE UPDATE ON stores 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_store_ratings_updated_at ON store_ratings;
CREATE TRIGGER update_store_ratings_updated_at 
  BEFORE UPDATE ON store_ratings 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();
