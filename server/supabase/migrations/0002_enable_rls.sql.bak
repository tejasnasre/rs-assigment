-- Enable Row Level Security (RLS) on all tables

-- Additional setup for RLS to work with application context
-- Create a function to set current user context
CREATE OR REPLACE FUNCTION set_current_user_context(user_id UUID)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  PERFORM set_config('app.current_user_id', user_id::text, true);
END;
$$;

-- Function to get current user context
CREATE OR REPLACE FUNCTION get_current_user_context()
RETURNS TABLE(user_id UUID, user_role user_role, is_active BOOLEAN, email_verified BOOLEAN)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT u.id, u.role, u.is_active, u.email_verified
  FROM users u
  WHERE u.id = current_setting('app.current_user_id', true)::uuid;
END;
$$;

-- Trigger to update store average rating when rating is inserted/updated/deleted
CREATE OR REPLACE FUNCTION update_store_rating_stats()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Update average rating and total ratings for the store
  UPDATE stores 
  SET 
    average_rating = COALESCE((
      SELECT ROUND(AVG(rating)::numeric, 1) 
      FROM store_ratings 
      WHERE store_id = COALESCE(NEW.store_id, OLD.store_id)
    ), 0),
    total_ratings = COALESCE((
      SELECT COUNT(*) 
      FROM store_ratings 
      WHERE store_id = COALESCE(NEW.store_id, OLD.store_id)
    ), 0),
    updated_at = NOW()
  WHERE id = COALESCE(NEW.store_id, OLD.store_id);
  
  RETURN COALESCE(NEW, OLD);
END;
$$;

-- Create triggers for store rating updates
DROP TRIGGER IF EXISTS update_store_rating_stats_trigger ON store_ratings;
CREATE TRIGGER update_store_rating_stats_trigger
  AFTER INSERT OR UPDATE OR DELETE ON store_ratings
  FOR EACH ROW
  EXECUTE FUNCTION update_store_rating_stats();

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;

-- Create updated_at triggers for all tables
DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at 
  BEFORE UPDATE ON users 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_stores_updated_at ON stores;
CREATE TRIGGER update_stores_updated_at 
  BEFORE UPDATE ON stores 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_store_ratings_updated_at ON store_ratings;
CREATE TRIGGER update_store_ratings_updated_at 
  BEFORE UPDATE ON store_ratings 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS on tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE stores ENABLE ROW LEVEL SECURITY;
ALTER TABLE store_ratings ENABLE ROW LEVEL SECURITY;
ALTER TABLE refresh_tokens ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE login_attempts ENABLE ROW LEVEL SECURITY;
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for users table
CREATE POLICY "Users can view their own profile" ON users 
  FOR SELECT 
  USING (id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Users can update their own profile" ON users 
  FOR UPDATE 
  USING (id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Admins can view all profiles" ON users 
  FOR SELECT 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

CREATE POLICY "Admins can update all profiles" ON users 
  FOR UPDATE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');
    
CREATE POLICY "Admins can delete users" ON users 
  FOR DELETE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

-- RLS Policies for stores table
CREATE POLICY "Anyone can view active stores" ON stores 
  FOR SELECT 
  USING (is_active = true);

CREATE POLICY "Store owners can view their own stores" ON stores 
  FOR SELECT 
  USING (owner_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Store owners can update their own stores" ON stores 
  FOR UPDATE 
  USING (owner_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Store owners can delete their own stores" ON stores 
  FOR DELETE 
  USING (owner_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Admins can view all stores" ON stores 
  FOR SELECT 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

CREATE POLICY "Admins can update all stores" ON stores 
  FOR UPDATE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

CREATE POLICY "Admins can delete any store" ON stores 
  FOR DELETE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

CREATE POLICY "Only store owners and admins can create stores" ON stores 
  FOR INSERT 
  WITH CHECK ((SELECT role FROM get_current_user_context()) IN ('store_owner', 'system_administrator'));

-- RLS Policies for store_ratings table
CREATE POLICY "Users can see all store ratings" ON store_ratings 
  FOR SELECT 
  USING (true);

CREATE POLICY "Users can create ratings for stores" ON store_ratings 
  FOR INSERT 
  WITH CHECK (user_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Users can update their own ratings" ON store_ratings 
  FOR UPDATE 
  USING (user_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Users can delete their own ratings" ON store_ratings 
  FOR DELETE 
  USING (user_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Admins can update any rating" ON store_ratings 
  FOR UPDATE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

CREATE POLICY "Admins can delete any rating" ON store_ratings 
  FOR DELETE 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

-- RLS Policies for refresh_tokens table
CREATE POLICY "Users can see their own refresh tokens" ON refresh_tokens 
  FOR SELECT 
  USING (user_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Admins can see all refresh tokens" ON refresh_tokens 
  FOR SELECT 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

-- RLS Policies for user_sessions table
CREATE POLICY "Users can see their own sessions" ON user_sessions 
  FOR SELECT 
  USING (user_id = current_setting('app.current_user_id', true)::uuid);

CREATE POLICY "Admins can see all sessions" ON user_sessions 
  FOR SELECT 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

-- RLS Policies for login_attempts table
CREATE POLICY "Admins can see all login attempts" ON login_attempts 
  FOR SELECT 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');

-- RLS Policies for role_permissions table
CREATE POLICY "All users can see role permissions" ON role_permissions 
  FOR SELECT 
  USING (true);

CREATE POLICY "Admins can manage role permissions" ON role_permissions 
  FOR ALL 
  USING ((SELECT role FROM get_current_user_context()) = 'system_administrator');
